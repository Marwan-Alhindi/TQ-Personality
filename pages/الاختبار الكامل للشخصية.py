import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import joblib
from sklearn.preprocessing import MinMaxScaler

# ุชุญููู ุงููููุฐุฌ ุงููุฏุฑุจ
k_fit = joblib.load('models/kmeans_model.pkl')

# ูุตู ูู ููุณุชุฑ
cluster_descriptions = {
    0: "๐ ุฐุง ุงููุงุญุฏ ุงููู ุนุงูุด ุญูุงุชู ุนูู ููุฏ ุฑุงูู. ูู ุดูุก ุนูุฏู \"ุนุงุฏู\"ุ ููููู ููุณู ุงูุณุงุนุฉ ูฅ ุงูุนุตุฑ ููุญูุณ ุจุงูุจูุงูุฑ ููู ููุฎุชูู ุณูุฉ...",
    1: "๐ญ ุฐุง ุงููู ููุจู ุฃููู ูู ุฎุจุฒ ุงูุชููุฑ. ูุจูู ูู ุฅุนูุงู ุฒูู ูููุชุจ ุฎูุงุทุฑ ุนู ุฐูุฑู ููุฏูู...",
    2: "๐ ุฐุง ุงููู ูู ููุช ูู \"ุฎู ูุฑูุญ ุงูุทุงูู\" ูุงูู: \"ุทูุจ ุฃุฑุณู ูู ุนูู ุงูุฅูููู ุงูุฎุทุฉ\"...",
    3: "๐ ุฐุง ุงููู ุชุญุณุจู ุทุงูุน ูู ูุณูุณู ููุฑูุ ุจุณ ูู ุณุงูู ูู ุญู ุงูุฑุจูุนุ ุจุณ ูุง ุฃุญุฏ ูุฏ ุดุงูู...",
    4: "๐ข ูุฐุง ุจุฑูุงู ุนูุงุทู. ูุบูุฑ ุงูุชูุงูุงุชู ุฃุณุฑุน ูู ุนุฑูุถ ูููุ ููู ุดูู ูุฏุฎู ููุงูุฉ ุฌุฏูุฏุฉ..."
}

st.set_page_config(page_title="ุชุญููู ุงูุดุฎุตูุฉ", layout="wide")

st.markdown("""
    <style>
    /* ุงูุฎุท ุงูุนุงู */
    html, body, [class*="st-"] {
        font-family: 'Cairo', sans-serif;
        text-align: right;
        background-color: #f5f7fa;
        color: #333;
    }
  
    h1, h2, h3 {
        color: #2e5cb8;
        margin-bottom: 10px;
        font-family: 'Cairo', sans-serif !important;

    }

    ul {
    background-color: #ffffff;
    padding: 15px 20px;
    border-radius: 12px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.06);
    max-width: 700px;
    margin: 10px 0 10px auto;  /* ุฎูู auto ุจุณ ูููุณุงุฑ */
    line-height: 2;
    text-align: right;
    }
    
    li {
    margin: 10px 0 10px auto;  /* ุฎูู auto ุจุณ ูููุณุงุฑ */
    font-size: 18px;
    }

    p {
        line-height: 1.8;
    }

    /* ุชุญุณูู ูุธูุฑ ุงูุตูุฑ */
    img {
        border-radius: 12px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
    }

    /* ุชุญุณูู ุงูุฒุฑ ูุงุญููุง ุฅู ูุฌุฏ */
    .stButton>button {
        background-color: #2e5cb8;
        color: white;
        font-weight: bold;
        border-radius: 8px;
        padding: 10px 20px;
        transition: 0.3s;
        border: none;
    }

    .stButton>button:hover {
        background-color: #1c3f91;
    }
    </style>

    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;600&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

st.markdown("""
<style>
    /* Base RTL settings */
    .rtl, .stMarkdown, .stTitle, p, h1, h2, h3, h4, h5, h6, .stButton {
        direction: rtl;
        text-align: right;
    }
    html, body, [class*="st-"] {
        background-color: #f5f7fa;
    }
            
    /* Ensure slider label text stays RTL */
    .stSlider label {
        text-align: right;
        width: 100%;
        display: block;
    }
    /* Set all text color to black */
    body, .stMarkdown, .stTitle, p, h1, h2, h3, h4, h5, h6, .stButton {
        color: black;
    }

</style>
""", unsafe_allow_html=True)

st.markdown("""
<style>
    .stForm {
        background-color: #f9f9f9;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 25px;
        border: 1px solid #e0e0e0;
    }
    .stButton button {
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 25px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .stButton button:hover {
        background-color: #0056b3;
        transform: scale(1.05);
    }
    .stButton button:active {
        background-color: #004085;
        transform: scale(1);
    }
</style>
""", unsafe_allow_html=True)


# ุนููุงู ุงููููุน
st.markdown('<h1 style="color: black;">ุชุญููู ุดุฎุตูุชู ุจุทุฑููุชูุง ุงูุฎุงุตุฉ</h1>', unsafe_allow_html=True)

st.markdown("""
### ูู ุนูุฑู ุญุณููุช ุฅูู ูุงุฆู ุบุฑูุจุ
ูุง ุชุดูู ููุ ุงุญูุง ููุง ูุญูู ุดุฎุตูุชู ููุทูุทู ุนูููุง ุดูู (ุจุญุจ ุทุจุนูุง).

ูู ูุงููููุนุ ูุง ุฑุงุญ ูููู ูู ุฅูู "ุทููุญ ููุจุฏุน" ูุจุณุ ูุง ูุง...
ุฑุงุญ ููุดู ูู ุงูุญูููุฉ ูุงููุฉ: ุฅูู ูุฒุงุฌูุ ุชุญุจ ุงูููุทูุญุ ูุชุฎุงู ูู ุงููุดุงุนุฑ ๐

ุฌุงูุจ ุนูู ุงูุฃุณุฆูุฉ ูุฎูููุง ูุจุฏุฃ ุญููุฉ ุงูุชุญููู โจ
""")

st.markdown("**ุงุฎุชุฑ ูู 0 (ูุง ุฃูุงูู ุฃุจุฏูุง) ุฅูู 5 (ุฃูุงูู ุชูุงููุง)**")

# ุงูุฃุณุฆูุฉ
ext_questions = {
    'EXT1': 'ุฃูุง ุฌู ุงูุญููุฉ',
    'EXT2': "ูุง ุฃุณููู ูุซูุฑ",
    'EXT3': ' ุฃููู ูุฑุชุงุญ ูุน ุงููุงุณ',
    'EXT4': 'ุฃููู ูู ุงูุฎูููุฉ ูุฎูู ุงูุฃุถูุงุก',
    'EXT5': 'ุฃุจุงุฏุฑ ูุฃุจุฏุฃ ุงูุณูุงูู',
    'EXT6': 'ูุง ุนูุฏู ููุงู ูุซูุฑ ุฃูููู',
    'EXT7': 'ุฃุณููู ูุน ูุงุณ ูุซูุฑ ุจุงูุญููุงุช',
    'EXT8': "ูุง ุฃุญุจ ุฃููุช ุงูุงูุชุจุงู ูููุณู",
    'EXT9': "ูุง ุนูุฏู ูุดููุฉ ุฃููู ูุฑูุฒ ุงูุงูุชูุงู",
    'EXT10': 'ุฃููู ุณุงูุช ูุน ุงูุบุฑุจุงุก'
}

est_questions = {
    'EST1': 'ุฃุชูุชุฑ ุจุณุฑุนุฉ',
    'EST2': 'ุฃููู ุฑุงูู ุฃุบูุจ ุงูููุช',
    'EST3': 'ุฃุดูู ูู ุงูุฃุดูุงุก',
    'EST4': 'ูุงุฏุฑุงู ุฃุญุณ ุจุงููุขุจุฉ',
    'EST5': 'ุฃุชุฃุซุฑ ุจุณูููุฉ',
    'EST6': 'ุฃูููุฑ ุจุณุฑุนุฉ',
    'EST7': 'ูุฒุงุฌู ูุชุบูุฑ ูุซูุฑ',
    'EST8': 'ุฏุงูู ูุชููุจ ูุฒุงุฌู',
    'EST9': 'ุฃุนุตุจ ุจุณูููุฉ',
    'EST10': 'ุบุงูุจุงู ุฃุญุณ ุจุงููุขุจุฉ'
}

agr_questions = {
    'AGR1': 'ูุง ุฃูุชู ุจุงููุงุณ ูุซูุฑ',
    'AGR2': 'ุฃุญุจ ูููุชู ุฃุนุฑู ุนู ุงููุงุณ',
    'AGR3': 'ุฃุฌุฑุญ ุงููุงุณ ุจููุงูู',
    'AGR4': "ุฃุญุณ ุจูุดุงุนุฑ ุงููุงุณ",
    'AGR5': "ูุง ุชูููู ูุดุงูู ุงููุงุณ",
    'AGR6': 'ููุจู ุทูุจ',
    'AGR7': 'ูุจ ูุฑุฉ ุฃูุชู ุจุงููุงุณ',
    'AGR8': 'ุฃุฎุตุต ููุช ูููุงุณ',
    'AGR9': "ุฃุญุณ ุจูุดุงุนุฑ ุบูุฑู",
    'AGR10': 'ุงููุงุณ ูุญุณูู ุจุงูุฑุงุญุฉ ูุนู'
}

csn_questions = {
    'CSN1': 'ุฏุงูู ูุณุชุนุฏ ูุตุงูู',
    'CSN2': 'ุฃุบุฑุงุถู ููุฑูุจุฉ ูุญูุณุฉ',
    'CSN3': 'ุฃุฑูุฒ ุนูู ุงูุชูุงุตูู',
    'CSN4': 'ุฃุฎุฑุจ ุงูุฃููุฑ',
    'CSN5': 'ุฃุฎูุต ุดุบูู ุนูู ุทูู',
    'CSN6': 'ุฃูุณู ุฃุฑุฌุน ุงูุฃุดูุงุก ููุงููุง',
    'CSN7': 'ุฃุญุจ ุงูุชุฑุชูุจ',
    'CSN8': 'ุฃุชูุฑุจ ูู ุดุบูู',
    'CSN9': 'ุฃูุดู ุนูู ุฌุฏูู',
    'CSN10': 'ุฃููู ุฏููู ุจุดุบูู'
}

opn_questions = {
    'OPN1': 'ุนูุฏู ูุญุตูู ูููุงุช ุฃุนุฑู ุฃุณุชุฎุฏูู',
    'OPN2': 'ุฃููู ุตุนูุจุฉ ุฃููู ุงูุฃููุงุฑ ุงูุนูููุฉ',
    'OPN3': 'ุฎูุงูู ูุงุณุน',
    'OPN4': 'ูุง ุฃุญุจ ุงูุฃููุงุฑ ุงูุนูููุฉ',
    'OPN5': 'ุนูุฏู ุฃููุงุฑ ุฑููุจุฉ',
    'OPN6': 'ุฎูุงูู ูู ูุฑุฉ ููู',
    'OPN7': 'ุฃููู ุงูุฃููุฑ ุจุณุฑุนุฉ',
    'OPN8': 'ุฃุณุชุฎุฏู ูููุงุช ุตุนุจุฉ',
    'OPN9': 'ุฃุญุจ ุฃูุนุฏ ุฃููุฑ ุจุงูุฃุดูุงุก',
    'OPN10': 'ุฏุงูู ุนูุฏู ุฃููุงุฑ ุฌุฏูุฏุฉ'
}

# ุฏูุฌ ูุชุฑุชูุจ ุงูุฃุณุฆูุฉ
all_questions = {**ext_questions, **est_questions, **agr_questions, **csn_questions, **opn_questions}
ordered_keys = sorted(all_questions.keys(), key=lambda x: (x[:3], int(x[3:])))
questions_ordered = {k: all_questions[k] for k in ordered_keys}

# ูุงุฌูุฉ ุงููุณุชุฎุฏู
responses = {}
with st.form("form_arabic"):
    for key, question in questions_ordered.items():
        responses[key] = st.slider(question, min_value=0, max_value=5, value=3, key=key)
    submitted = st.form_submit_button("ุงุญูููู!")

if submitted:
    try:
        df = pd.DataFrame([responses])
        df = df[ordered_keys]

        scaler = MinMaxScaler(feature_range=(0, 1))
        scaler.fit(pd.DataFrame([[0]*50, [5]*50], columns=ordered_keys))
        scaled_df = scaler.transform(df)

        cluster = int(k_fit.predict(scaled_df)[0])
        cluster_description = cluster_descriptions.get(cluster, "๐คทโโ๏ธ ูุง ููุฌุฏ ูุตู ููุฐุง ุงูููุณุชุฑ")

        trait_scores = {
            'extroversion': df[[f'EXT{i}' for i in range(1, 11)]].mean(axis=1).iloc[0],
            'neurotic': df[[f'EST{i}' for i in range(1, 11)]].mean(axis=1).iloc[0],
            'agreeable': df[[f'AGR{i}' for i in range(1, 11)]].mean(axis=1).iloc[0],
            'conscientious': df[[f'CSN{i}' for i in range(1, 11)]].mean(axis=1).iloc[0],
            'open': df[[f'OPN{i}' for i in range(1, 11)]].mean(axis=1).iloc[0],
        }

        st.success("โจ ุชู ุงูุชุญููู! ููุฐู ุงููุชูุฌุฉ ๐")
        st.markdown(f"### ุงูููุณุชุฑ ุงูุฎุงุต ุจู: `{cluster}`")
        st.markdown(f"**{cluster_description}**")

        st.markdown("### ููุฎุต ุงูุฃุจุนุงุฏ ุงูุฎูุณุฉ:")
        summary_df = pd.DataFrame([trait_scores])
        st.dataframe(summary_df.style.format(precision=1), use_container_width=True)

        st.markdown("### ุชูุซูู ูุฑุฆู ูุฃุจุนุงุฏู")
        traits = list(trait_scores.keys())
        values = [trait_scores[t] * 10 for t in traits]

        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=traits,
            y=values,
            name='ุฏุฑุฌุงุชู',
            marker_color='lightgreen',
            opacity=0.6
        ))
        fig.add_trace(go.Scatter(
            x=traits,
            y=values,
            mode='lines+markers',
            name='ูุคุดุฑ ุงูุดุฎุตูุฉ',
            line=dict(color='red'),
            marker=dict(size=10)
        ))
        fig.update_layout(
            title=f"ุงูููุณุชุฑ ุฑูู {cluster}",
            yaxis=dict(range=[0, 50]),
            xaxis_title="ุงูุจูุนุฏ",
            yaxis_title="ุงูุฏุฑุฌุฉ (ร10)",
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.error(f"โ ุตุงุฑ ุฎุทุฃ ูู ุงูุชุญููู: {e}")