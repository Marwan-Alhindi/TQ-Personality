import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(page_title="ุชุญููู ุงูุดุฎุตูุฉ ุงููุงูู", layout="wide")

# ุชูุณูู ุนุงู ููุตูุญุฉ
st.markdown("""
<style>
    html, body, [class*="st-"] {
        font-family: 'Cairo', sans-serif;
        text-align: right;
        background-color: #f5f7fa;
        color: #333;
    }
    h1, h2, h3 {
        color: #2e5cb8;
        margin-bottom: 10px;
        font-family: 'Cairo', sans-serif !important;
    }
    .stSlider label, .stButton>button, .stForm {
        direction: rtl;
        text-align: right;
    }
    .stForm {
        background-color: #f9f9f9;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 25px;
        border: 1px solid #e0e0e0;
    }
    .stButton>button {
        background-color: #007BFF;
        color: white;
        font-weight: bold;
        border-radius: 8px;
        padding: 10px 20px;
        border: none;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #0056b3;
    }
</style>
""", unsafe_allow_html=True)

st.title("ุชุญููู ุดุฎุตูุชู ุจุงุณุชุฎุฏุงู 50 ุณุคุงู")

st.markdown("""
### ุฌุงูุจ ุนูู 50 ุณุคุงูุ ููู ุฅุฌุงุจุชู ุฑุงุญ ุชุณุงุนุฏูุง ูุญุทู ูู ุงูููุณุชุฑ ุงูุฃูุฑุจ ูู ๐
""")

# ุงูุฃุณุฆูุฉ ุจุงูุฅูุฌููุฒูุฉ (ููุชูุงูู ูุน ุงููููุฐุฌ)
ext_questions = {
    'EXT1': 'ุฃูุง ุฌู ุงูุญููุฉ',
    'EXT2': 'ุฃูุง ูุง ุฃุชููู ูุซูุฑ',
    'EXT3': 'ุฃุดุนุฑ ุจุงูุฑุงุญุฉ ุญูู ุงููุงุณ',
    'EXT4': 'ุฃูุถู ุฃููู ูู ุงูุฎูููุฉ',
    'EXT5': 'ุฃุจุฏุฃ ุงููุญุงุฏุซุงุช ูู ููุณู',
    'EXT6': 'ูุง ุนูุฏู ููุงู ูุซูุฑ ุฃูููู',
    'EXT7': 'ุฃุชุญุฏุซ ูุน ูุซูุฑ ูู ุงููุงุณ ูู ุงูุญููุงุช',
    'EXT8': 'ูุง ุฃุญุจ ุฃููุช ุงูุงูุชุจุงู ูููุณู',
    'EXT9': 'ูุง ุนูุฏู ูุดููุฉ ุฃููู ูุฑูุฒ ุงูุงูุชุจุงู',
    'EXT10': 'ุฃููู ุณุงูุช ุญูู ุงูุบุฑุจุงุก'
}

est_questions = {
    'EST1': 'ุฃุชูุชุฑ ุจุณูููุฉ',
    'EST2': 'ุฃููู ูุฑุชุงุญ ุฃุบูุจ ุงูููุช',
    'EST3': 'ุฃููู ุจุดุฃู ุงูุฃุดูุงุก',
    'EST4': 'ูุงุฏุฑุงู ูุง ุฃุดุนุฑ ุจุงููุขุจุฉ',
    'EST5': 'ุฃุชุฃุซุฑ ุจุณูููุฉ',
    'EST6': 'ุฃูุฒุนุฌ ุจุณูููุฉ',
    'EST7': 'ูุฒุงุฌู ูุชุบูุฑ ูุซูุฑ',
    'EST8': 'ุฃุนุงูู ูู ุชููุจุงุช ูุฒุงุฌูุฉ ูุซูุฑุฉ',
    'EST9': 'ุฃุบุถุจ ุจุณูููุฉ',
    'EST10': 'ุฃุดุนุฑ ุจุงููุขุจุฉ ูุซูุฑุงู'
}

agr_questions = {
    'AGR1': 'ูุง ุฃูุชู ูุซูุฑ ุจุงููุงุณ',
    'AGR2': 'ุฃุญุจ ุงูุชุนุฑู ุนูู ุงููุงุณ',
    'AGR3': 'ุฃููู ุงููุงุณ ุจููุงูู',
    'AGR4': 'ุฃุชุนุงุทู ูุน ูุดุงุนุฑ ุงูุขุฎุฑูู',
    'AGR5': 'ูุง ููููู ูุดุงูู ุงููุงุณ',
    'AGR6': 'ููุจู ุทูุจ',
    'AGR7': 'ูุงูู ููุชู ูุซูุฑ ุจุงููุงุณ',
    'AGR8': 'ุฃุฎุตุต ููุช ูููุงุณ',
    'AGR9': 'ุฃุดุนุฑ ุจูุดุงุนุฑ ุงูุขุฎุฑูู',
    'AGR10': 'ุฃุฌุนู ุงููุงุณ ูุดุนุฑูู ุจุงูุฑุงุญุฉ'
}

csn_questions = {
    'CSN1': 'ุฃูุง ุฏุงูู ูุณุชุนุฏ',
    'CSN2': 'ุฃุฎูู ุฃุบุฑุงุถู ูุจุนุซุฑุฉ',
    'CSN3': 'ุฃูุชุจู ููุชูุงุตูู',
    'CSN4': 'ุฃุฎุฑุจ ุงูุฃููุฑ',
    'CSN5': 'ุฃููู ุงูููุงู ุนูู ุทูู',
    'CSN6': 'ุฃูุณู ุฃุฑุฌุน ุงูุฃุดูุงุก ููุงููุง',
    'CSN7': 'ุฃุญุจ ุงูุชุฑุชูุจ',
    'CSN8': 'ุฃุชูุฑุจ ูู ูุณุคูููุงุชู',
    'CSN9': 'ุฃูุชุฒู ุจุฌุฏููู',
    'CSN10': 'ุฃููู ุฏููู ุฌุฏุงู ูู ุดุบูู'
}

opn_questions = {
    'OPN1': 'ููุฑุฏุงุชู ูููุฉ ูุบููุฉ',
    'OPN2': 'ุฃูุงุฌู ุตุนูุจุฉ ูู ููู ุงูุฃููุงุฑ ุงููุฌุฑุฏุฉ',
    'OPN3': 'ุฎูุงูู ูุงุณุน',
    'OPN4': 'ูุง ุฃูุชู ุจุงูุฃููุงุฑ ุงููุฌุฑุฏุฉ',
    'OPN5': 'ุนูุฏู ุฃููุงุฑ ููุชุงุฒุฉ',
    'OPN6': 'ุฎูุงูู ูู ููู',
    'OPN7': 'ุฃููู ุงูุฃููุฑ ุจุณุฑุนุฉ',
    'OPN8': 'ุฃุณุชุฎุฏู ูููุงุช ุตุนุจุฉ',
    'OPN9': 'ุฃูุถู ููุช ุฃููุฑ ุจุงูุฃุดูุงุก',
    'OPN10': 'ุฏุงูู ุนูุฏู ุฃููุงุฑ ุฌุฏูุฏุฉ'
}

# ุฏูุฌ ูุชุฑุชูุจ ุงูุฃุณุฆูุฉ
all_questions = {**ext_questions, **est_questions, **agr_questions, **csn_questions, **opn_questions}
ordered_keys = sorted(all_questions.keys(), key=lambda x: (x[:3], int(x[3:])))
questions_ordered = {k: all_questions[k] for k in ordered_keys}

responses = {}
with st.form("form_full_50"):
    for key, question in questions_ordered.items():
        responses[key] = st.slider(f"{key}: {question}", 0, 5, 3, key=key)
    submitted = st.form_submit_button("ุงุญูููู!")

if submitted:
    try:
        res = requests.post("http://127.0.0.1:8000/analyze_50", json=responses)

        if res.status_code == 200:
            result = res.json()

            st.success("โจ ุชู ุงูุชุญููู! ููุฐู ุงููุชูุฌุฉ ๐")
            st.markdown(f"### ุงูููุณุชุฑ ุงูุฎุงุต ุจู: `{result['cluster']}`")
            st.markdown(f"**{result['description']}**")

            st.markdown("### ููุฎุต ุงูุฃุจุนุงุฏ ุงูุฎูุณุฉ:")
            trait_scores = result["scores"]
            summary_df = pd.DataFrame([trait_scores])
            st.dataframe(summary_df.style.format(precision=1), use_container_width=True)

            # ุฑุณู ุจูุงูู ุจู Plotly
            st.markdown("### ุชูุซูู ูุฑุฆู ูุฃุจุนุงุฏู")
            traits = list(trait_scores.keys())
            values = [trait_scores[t] * 10 for t in traits]

            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=traits,
                y=values,
                name='ุฏุฑุฌุงุชู',
                marker_color='lightgreen',
                opacity=0.6
            ))
            fig.add_trace(go.Scatter(
                x=traits,
                y=values,
                mode='lines+markers',
                name='ูุคุดุฑ ุงูุดุฎุตูุฉ',
                line=dict(color='red'),
                marker=dict(size=10)
            ))
            fig.update_layout(
                title=f"ุงูููุณุชุฑ ุฑูู {result['cluster']}",
                yaxis=dict(range=[0, 50]),
                xaxis_title="ุงูุจูุนุฏ",
                yaxis_title="ุงูุฏุฑุฌุฉ (ร10)",
                template="plotly_white"
            )

            st.plotly_chart(fig, use_container_width=True)

        else:
            st.error("๐ฅ ุตุงุฑ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูู API. ุชุฃูุฏ ุฃูู ุดุบุงู.")
    except Exception as e:
        st.error(f"โ ูุดู ุงูุงุชุตุงู ุจุงูุณูุฑูุฑ: {e}")