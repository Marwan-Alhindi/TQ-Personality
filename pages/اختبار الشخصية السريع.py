import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(page_title="ุชุญููู ุงูุดุฎุตูุฉ", layout="wide")

# ุนููุงู ุงููููุน
st.title("ุชุญููู ุดุฎุตูุชู ุจุทุฑููุชูุง ุงูุฎุงุตุฉ")

st.markdown("""
### ูู ุนูุฑู ุญุณููุช ุฅูู ูุงุฆู ุบุฑูุจุ
ูุง ุชุดูู ููุ ุงุญูุง ููุง ูุญูู ุดุฎุตูุชู ููุทูุทู ุนูููุง ุดูู (ุจุญุจ ุทุจุนูุง).

ูู ูุงููููุนุ ูุง ุฑุงุญ ูููู ูู ุฅูู "ุทููุญ ููุจุฏุน" ูุจุณุ ูุง ูุง...
ุฑุงุญ ููุดู ูู ุงูุญูููุฉ ูุงููุฉ: ุฅูู ูุฒุงุฌูุ ุชุญุจ ุงูููุทูุญุ ูุชุฎุงู ูู ุงููุดุงุนุฑ ๐

ุฌุงูุจ ุนูู ุงูุฃุณุฆูุฉ ูุฎูููุง ูุจุฏุฃ ุญููุฉ ุงูุชุญููู โจ
""")

st.markdown("**ุงุฎุชุฑ ูู 0 (ูุง ุฃูุงูู ุฃุจุฏูุง) ุฅูู 5 (ุฃูุงูู ุชูุงููุง)**")

# ุงูุฃุณุฆูุฉ ุญุณุจ ุงูุณูุงุช
questions = {
    'EXT2': 'ุฃูุง ูุง ุฃุชููู ูุซูุฑ',
    'EXT3': 'ุฃุดุนุฑ ุจุงูุฑุงุญุฉ ุญูู ุงููุงุณ',
    'EXT4': 'ุฃูุถู ุฃููู ุจุงูุฎูููุฉ ููุง ุฃููู ูุฑูุฒ ุงูุงูุชุจุงู',
    'EXT5': 'ุฃุจุฏุฃ ุงููุญุงุฏุซุงุช ูู ููุณู',
    'EXT7': 'ุฃุชููู ูุน ูุงุณ ูุซูุฑ ูู ุงูุญููุงุช',
    'EXT9': 'ูุง ุนูุฏู ูุดููุฉ ุฃููู ูุฑูุฒ ุงูุงูุชุจุงู',
    'EXT10': 'ุฃููู ุณุงูุช ููุง ุฃุชุนุงูู ูุน ูุงุณ ูุง ุฃุนุฑููู',
    'EST6': 'ุฃูุฒุนุฌ ุจุณูููุฉ',
    'EST8': 'ูุฒุงุฌู ูุชููุจ ูุซูุฑ',
    'AGR7': 'ูุง ุฃูุชู ูุซูุฑ ุจุงููุงุณ ุงูุขุฎุฑูู',
    'OPN9': 'ุฃูุถู ููุช ุฃููุฑ ูู ุฃุดูุงุก ูุซูุฑุฉ',
    'CSN4': 'ุฃุฎุจุต ุงูุฃููุฑ ููุง ุฃุฑุชุจูุง'
}

# ุฌูุน ุงูุฅุฌุงุจุงุช
responses = {}
with st.form("form_arabic"):
    for key, question in questions.items():
        responses[key] = st.slider(question, min_value=0, max_value=5, value=3, key=key)
    submitted = st.form_submit_button("ุงุญูููู!")

# ุฅุฑุณุงู ูุชุญููู
if submitted:
    try:
        res = requests.post("http://127.0.0.1:8000/analyze", json=responses)

        if res.status_code == 200:
            result = res.json()

            st.success("โจ ุชู ุงูุชุญููู! ููุฐู ุงููุชูุฌุฉ ๐")
            st.markdown(f"### ุงูููุณุชุฑ ุงูุฎุงุต ุจู: `{result['cluster']}`")
            st.markdown(f"**{result['description']}**")

            st.markdown("### ููุฎุต ุงูุฃุจุนุงุฏ ุงูุฎูุณุฉ:")
            trait_scores = result["scores"]
            summary_df = pd.DataFrame([trait_scores])
            st.dataframe(summary_df.style.format(precision=1), use_container_width=True)

            # ุฑุณู ุจูุงูู ุจู Plotly
            st.markdown("### ุชูุซูู ูุฑุฆู ูุฃุจุนุงุฏู")
            traits = list(trait_scores.keys())
            values = [trait_scores[t] * 10 for t in traits]

            fig = go.Figure()

            fig.add_trace(go.Bar(
                x=traits,
                y=values,
                name='ูููู',
                marker_color='lightgreen',
                opacity=0.6
            ))

            fig.add_trace(go.Scatter(
                x=traits,
                y=values,
                mode='lines+markers',
                name='ุฎุท ุงูุชุญููู',
                line=dict(color='red'),
                marker=dict(size=10)
            ))

            fig.update_layout(
                title=f"ุงูููุณุชุฑ ุฑูู {result['cluster']}",
                yaxis=dict(range=[0, 50]),
                xaxis_title="ุงูุจูุนุฏ",
                yaxis_title="ุงูุฏุฑุฌุฉ (ูุถุฑูุจุฉ ร10)",
                template="plotly_white"
            )

            st.plotly_chart(fig, use_container_width=True)

        else:
            st.error("๐ฅ ุตุงุฑ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูู API. ุชุฃูุฏ ุฃูู ุดุบุงู.")
    except Exception as e:
        st.error(f"โ ูุดู ุงูุงุชุตุงู ุจุงูุณูุฑูุฑ: {e}")